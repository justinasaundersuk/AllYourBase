
//  Text overflow
//  An easy way to truncate text with an ellipsis.
//  Example usage:
//
// .text-truncate
// {
//     @include text-truncate()
// }
@mixin text-truncate($overflow: ellipsis) {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: $overflow; // values are: clip, ellipsis, or a string
}


// Absolute Positioning - shorthand
//
// Example usage:
//
// .relative-container {
//     @include .abs-pos(50px, 10px, 50px, 0);
// }
@mixin abs-pos($top: auto, $right: auto, $bottom: auto, $left: auto) {
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    position: absolute;
}

//    Rem font sizing with fallback
//    Note: "calculate-rem" function is required for use

//    Example usage:

//    h2 {
//        font-size: 24px;

//        @include min(768) { font-size: 30px; }
//        @include min(992) { font-size: 36px; }
//    }
@mixin font-size($size) {
    // font-size: $size;
    font-size: calculate-rem($size);
}

//    Border-radius
//
//    background-clip: padding-box is set to fix an overflow bug in some browsers
//    where the background is still partially visible despite border-radius
//    rounding the corners
//
@mixin tab-radius($top:0, $bottom:0) {
    border-radius: $top $top $bottom $bottom;
    background-clip: padding-box;
}

@mixin border-radius($radius: 8px) {
    border-radius: $radius;
    background-clip: padding-box;
}

@mixin corner-radius($topleft: 0, $topright: 0, $bottomright: 0, $bottomleft: 0) {
    border-radius: $topleft $topright $bottomright $bottomleft;
    background-clip: padding-box;
}


//    Used for shorthand media queries
//    Note: "em" function is required for use

//    Example usage:

//    h2 {
//        font-size: 24px;

//        @include min(768) { font-size: 30px; }
//        @include min(992) { font-size: 36px; }
//    }
@mixin min($bp, $max: 'null', $device: 'screen') {
    $bp: em($bp);
    @if $max == 'null' {
        @media only #{$device} and (min-width: #{$bp}) { @content; }
    } @else {
        $max: em($max);
        @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) { @content; }
    }
}

@mixin max($bp, $min: 'null', $device: 'screen') {
    $bp: em($bp);
    @if $min == 'null' {
        @media only #{$device} and (max-width: #{$bp}){@content;}
    } @else {
        $min: em($min);
        @media only #{$device} and (max-width: #{$bp}) and (min-width: #{$min}) { @content; }
    }
}


//    Center an element vertically and horizontally within a container
//        - container must be position: relative
//        - container must be fixed height

//    Example usage:

//    .social {
//        position: relative;

//        @include min(992) {
//            height: 460px;
//            margin-top: 0;
//            padding: 0;
//            overflow: hidden;

//            & .absolute-center {
//                @include absolute-center();
//            }
//        }
//    }
@mixin absolute-center() {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}


//    Will align content to center in mobile view (a common requirement) and align to
//    $position at the $breakpoint (and above)

//    Defaults set to left and 480px

//    Example usage:

//    h2 {
//        font-size: 24px;
//        @include center-xs(left, 768)
//    }
//
//    Would suggest passing $breakpoint as your mobile > tablet breakpoint e.g.
//    $bp-sm (768px)
@mixin center-xs($position: 'left', $breakpoint: '480px') {
    text-align: center;

    @include min($breakpoint) {
        text-align: $position;
    }
}

//    Hi resolution retina image alternative
//    Example usage:

//    div.logo {
//        background: url("logo.png") no-repeat;
//        @include image-2x("logo2x.png", 100px, 25px);
//    }
@mixin image-2x($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
           (-o-min-device-pixel-ratio: 2.6/2),
           (-webkit-min-device-pixel-ratio: 1.3),
           (min-device-pixel-ratio: 1.3),
           (min-resolution: 1.3dppx) {
        // on retina, use image that's scaled by 2
        background-image: url($image);
        background-size: $width $height;
    }
}


//    Simple directional arrow (triangle) mixin
//    Example usage:

//    .arrowtest {
//        @include arrow(right, $blue, 12);
//    }

@mixin arrow($direction, $color, $size) {
    $rem-size: ($size / 10) + rem;

    @if $direction == 'left' {
        border-top: $rem-size solid transparent;
        border-right: $rem-size solid $color;
        border-bottom: $rem-size solid transparent;
    } @else if $direction == 'right' {
        border-top: $rem-size solid transparent;
        border-bottom: $rem-size solid transparent;
        border-left: $rem-size solid $color;
    } @else if $direction == 'p' {
        border-left: $rem-size solid transparent;
        border-right: $rem-size solid transparent;
        border-bottom: $rem-size solid $color;
    } @else if $direction == 'down' {
        border-left: $rem-size solid transparent;
        border-right: $rem-size solid transparent;
        border-top: $rem-size solid $color;
    }
}


//    Include font(s) via the file system
//    Fonts folder should include woff and woff2 file formats (svg, ttf and eot are no longer needed)
//    See: http://stackoverflow.com/questions/36105194/are-eot-ttf-and-svg-still-necessary-in-the-font-face-declaration

//    Example usage:

//    Within _fonts.scss:
//
//    @include fontface('defused','../fonts/defused/defused-webfont');
//
//    Then in use:
//
//    .defused {
//        font-family: 'defused';
//    }

@mixin fontface($family, $src, $style: normal, $weight: normal) {
    @font-face {
        font-family: $family;
        src: url('#{$src}.woff') format('woff'),
        url('#{$src}.woff2') format('woff2');
        font-style: $style;
        font-weight: $weight;
    }
}


// EXPERIMENTAL ---------------------------------------------------------------------------------------

//    A more backwards-compatible opacity mixin
//@mixin opacity($opacity) {
//    $ieopacity: ($opacity * 100);
//    opacity: $opacity;
// 	filter: alpha(opacity=$ieopacity); /* IE6+ */
//	filter: progid:DXImageTransform.Microsoft.Alpha(opacity=$ieopacity); /* IE6+ */
//	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(opacity=#{$ieopacity})"; /* this works in IE8 only */
//}
